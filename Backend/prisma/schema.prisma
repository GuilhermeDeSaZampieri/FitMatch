
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id String @id @default(uuid()) 
  name String @db.VarChar(600)
  email String @unique
  cpf String @unique
  password String
  avatar String
  xp Int
  level Int
  deleteAt DateTime?
  

  userAchievements UserAchievements[]
  preferences Preferences[]
  activityParticipants ActivityParticipants[]
  activities Activities[]
  @@map("users")
}

model UserAchievements{
  id          String @id @default(uuid())
  users Users @relation(fields: [userId], references: [id])
  userId String
  achievements Achievements @relation(fields: [achievementId], references: [id])
  achievementId String
  @@map("userAchievements")
  @@unique([userId, achievementId])
}

model Achievements{
  id          String @id @default(uuid())
  name String @unique
  criterion String

  userAchievements UserAchievements[]
  @@map("achievements")
}


model Preferences{
  id          String @id @default(uuid())
  activityTypes ActivityTypes @relation(fields: [typeId],  references: [id])
  typeId String
  users Users @relation(fields: [userId], references: [id])
  userId String

  @@map("preferences")
  @@unique([typeId,userId])
}

model Activities{
  id          String @id @default(uuid())
  title       String
  description String

  activityTypes ActivityTypes @relation(fields: [typeId], references: [id])
  typeId String  

  creator Users @relation(fields: [creatorId], references: [id])
  creatorId String 


  activityParticipants ActivityParticipants[]

  confirmationCode String
  image String
  scheduledDate DateTime
  createdAt DateTime
  deletedAt DateTime?
  completedAt DateTime?
  private Boolean

  activityAddresses ActivityAddresses?


  @@map("activities")
}

model ActivityParticipants{
  id          String @id @default(uuid())

  activities Activities @relation(fields: [activityId], references: [id])
  activityId String 
  users Users @relation(fields: [userId], references: [id])
  userId String 

  approved Boolean @default(false)
  confirmedAt DateTime?
  @@map("activityParticipants")
  @@unique([activityId, userId])
}

model ActivityTypes{
  id          String @id @default(uuid())
  name String @unique
  description String @unique
  image String

  activities Activities[]
  preferences Preferences[]
  @@map("activityTypes")
  
} 

model ActivityAddresses{
  id          String @id @default(uuid())

  activities Activities @relation(fields: [activityId], references: [id])
  activityId String @unique

  latitude Float
  longitude Float

  @@map("activityAddresses")
}

